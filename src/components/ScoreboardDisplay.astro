---
// src/components/ScoreboardDisplay.astro
const { games } = Astro.props;

const formatDate = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' };
  return new Date(dateString).toLocaleDateString('en-US', options);
}

const toTitleCase = (str: string) => {
  if (!str) return '';
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}
---

<div class="scoreboard-grid">
  {games.map(game => (
    <div class="game-card" data-game-id={game.id}>
      <div class="game-header">
        <span class="game-date">{formatDate(game.gameDate)}</span>
        <span class="game-level">{toTitleCase(game.teams)}</span>
      </div>
      <div class="game-body">
        <div class="team">
          <span class="team-name">{game.ehs}</span>
          <span class="team-score">{game.ehsScore}</span>
        </div>
        <div class="team">
          <span class="team-name">{game.opp}</span>
          <span class="team-score">{game.oppScore}</span>
        </div>
        {game.final === 1 ? (
          <div class="game-status">
            <span class="game-final">FINAL</span>
          </div>
        ) : (
          (game.qtr || game.timeInqtr) && (
            <div class="game-status">
              {game.qtr && <span class="game-quarter">{game.qtr}</span>}
              {game.timeInqtr && <span class="game-time">{game.timeInqtr}</span>}
            </div>
          )
        )}
      </div>
      <div class="game-footer">
        {game.comments && (
          <p class="game-comment">{game.comments}</p>
        )}
        <div class="game-updates">
          <details class="updates-details" data-loaded="false">
            <summary class="updates-heading">Recent Updates</summary>
            <ul class="updates-list" aria-live="polite"></ul>
          </details>
        </div>
      </div>
    </div>
  ))}
</div>

<style>
  .game-status {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #555;
  }
  
  .game-quarter {
    font-weight: bold;
    background-color: #f0f0f0;
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    border: 1px solid #ddd;
  }
  
  .game-time {
    font-family: monospace;
  }
  
  .game-final {
    font-weight: bold;
    color: #d9534f;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 0.25rem 0.5rem;
    border: 1px solid #d9534f;
    border-radius: 3px;
  }
  
  .game-updates {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #eee;
  }
  
  .updates-heading {
    font-size: 0.9rem;
    font-weight: 600;
    color: #555;
    cursor: pointer;
  }
  
  .updates-details {
    width: 100%;
  }
  
  .updates-details summary {
    padding: 0.2rem 0;
    list-style: none;
    display: flex;
    align-items: center;
  }
  
  .updates-details summary::before {
    content: '▶';
    display: inline-block;
    margin-right: 0.5rem;
    font-size: 0.7rem;
    color: #777;
  }
  
  .updates-details[open] summary::before {
    content: '▼';
  }
  
  .updates-list {
    list-style: none;
    padding: 0;
    margin: 0.5rem 0 0 0;
    font-size: 0.85rem;
  }
  
  .update-item {
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    background-color: #f9f9f9;
    border-left: 3px solid #ddd;
  }
</style>

<script>
  function escapeHtml(str) {
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/\"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.game-card[data-game-id]').forEach((cardEl) => {
      const card = cardEl as HTMLElement;
      const gameId = card.getAttribute('data-game-id');
      const details = card.querySelector('.updates-details') as HTMLDetailsElement | null;
      if (!details || !gameId) return;
      const list = card.querySelector('.updates-list') as HTMLElement | null;
      const summary = card.querySelector('.updates-heading') as HTMLElement | null;

      details.addEventListener('toggle', async () => {
        if (!details.open) return;
        if (details.getAttribute('data-loaded') === 'true') return;
        try {
          const res = await fetch(`/api/games/${gameId}/updates`);
          const updates: any[] = res.ok ? await res.json() : [];
          if (summary) {
            summary.textContent = updates.length > 0 ? `Recent Updates (${updates.length})` : 'Recent Updates (0)';
          }
          if (!list) return;
          if (!updates || updates.length === 0) {
            list.innerHTML = '<li class="update-item"><div class="update-row"><span class="update-text">No updates yet</span><span class="update-timestamp"></span></div></li>';
          } else {
            list.innerHTML = updates.map((u: any) =>
              `<li class="update-item"><div class="update-row"><span class="update-text" title="${escapeHtml(u.update_text)}">${escapeHtml(u.update_text)}</span><span class="update-timestamp">${escapeHtml(u.created_at)}</span></div></li>`
            ).join('');
          }
          details.setAttribute('data-loaded', 'true');
        } catch (_) {
          if (summary) summary.textContent = 'Recent Updates (0)';
          if (list) {
            list.innerHTML = '<li class="update-item"><div class="update-row"><span class="update-text">No updates yet</span><span class="update-timestamp"></span></div></li>';
          }
          details.setAttribute('data-loaded', 'true');
        }
      });
    });
  });
</script>
