import"./hoisted.DxfSxqbr.js";function f(a,e){if(!a.dataset.gameId)return;const o=a.querySelector(".update-history");if(o){if(!e||e.length===0){o.style.display="none";return}o.style.display="block",o.innerHTML=e.map(s=>`
      <div class="update-item">
        <div class="update-meta">
          <span class="update-user">${(s.user_email||"").split("@")[0]}</span>
          <span class="update-time">${new Date(s.created_at).toLocaleString()}</span>
        </div>
        <div class="update-text">${s.update_text}</div>
      </div>
    `).join("")}}async function S(a){try{const e=await fetch(`/api/games/${a}/updates`);if(!e.ok)throw new Error("Failed to load updates");const o=(await e.json()).results||[],s=document.querySelector(`.game-card[data-game-id="${a}"]`);s&&f(s,o)}catch(e){console.error("Error loading update history:",e)}}document.addEventListener("click",async a=>{console.log("🖱️ Click event detected on:",a.target);const e=a.target;if(!e.classList.contains("update-button")){console.log("❌ Not an update button, ignoring click");return}console.log("✅ Update button click confirmed");const r=e.closest(".game-card"),o=r.dataset.gameId,s=r.querySelectorAll(".team-score-input"),u=r.querySelector(".update-text-input"),p=u?.value.trim()||"",c=s[0].value,l=s[1].value,h=e.textContent;e.textContent="Updating...",e.setAttribute("disabled","true");const g=t=>{console.error("Authentication error:",t),document.cookie="auth=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;",localStorage.removeItem("authToken"),window.location.href=`/login?returnTo=${encodeURIComponent(window.location.pathname)}`},y=()=>{const t=document.cookie.match(/auth=([^;]+)/);if(console.log("🔍 Step 2 - Cookie check:",t?"Found":"Not found"),t)return console.log("🔑 Step 2 - Token from cookies:",t[1].substring(0,20)+"..."),t[1];const n=localStorage.getItem("authToken");return console.log("🔍 Step 2 - localStorage check:",n?"Found":"Not found"),n&&console.log("🔑 Step 2 - Token from localStorage:",n.substring(0,20)+"..."),n};console.log("🚀 Step 1 - Update Score button clicked for game:",o),console.log("📊 Step 3 - Score values extracted - EHS:",c,"OPP:",l),console.log("📝 Step 3 - Update text:",p||"(none)");const i=y();if(!i){console.error("❌ Step 3 - Authentication failed: No token found"),g("No authentication token found");return}console.log("✅ Step 3 - Authentication token validated successfully");try{console.log("🔍 PATCH Request details:",{url:`/api/games/${o}`,token:i?`${i.substring(0,10)}...`:"none",ehsScore:parseInt(c,10),oppScore:parseInt(l,10),updateText:p});const t=await fetch(`/api/games/${o}`,{method:"PATCH",credentials:"include",headers:{"Content-Type":"application/json",Authorization:`Bearer ${i.trim()}`},body:JSON.stringify({ehsScore:parseInt(c,10),oppScore:parseInt(l,10),updateText:p})});console.log("🔄 PATCH Response status:",t.status);let n;try{n=await t.json()}catch(k){console.error("❌ JSON Parse Error:",k);const C=t.clone();try{const m=await C.text();console.error("❌ Raw response:",m)}catch(m){console.error("❌ Could not read response text:",m)}throw new Error("Invalid JSON response from server")}if(!t.ok){if(console.error("❌ PATCH Request Failed - Status:",t.status),console.error("❌ PATCH Response:",n),t.status===401){console.error("❌ 401 Unauthorized - Token may be invalid or expired"),e.textContent="Auth Error - Check Console",e.style.backgroundColor="#d9534f",setTimeout(()=>{g("Session expired")},5e3);return}throw new Error(n.error||"Failed to update score")}u&&(u.value="");const d=r.querySelectorAll(".team-score-input");d[0]&&d[1]&&(d[0].value=String(c),d[1].value=String(l)),n.updates&&n.updates.length>0?f(r,n.updates):await S(o),e.textContent="Updated!",setTimeout(()=>{e.textContent=h,e.removeAttribute("disabled")},2e3)}catch(t){if(console.error("Update Error:",t),t instanceof Error&&t.message.includes("token")){g("Invalid session");return}e.textContent="Error!",e.style.backgroundColor="#d9534f",setTimeout(()=>{e.textContent=h,e.removeAttribute("disabled"),e.style.backgroundColor=""},3e3)}});document.addEventListener("DOMContentLoaded",()=>{if(console.log("🚀 AdminScoreboardDisplay script loaded"),console.log("📄 Current page body dataset:",document.body.dataset),console.log("🎯 Game cards found:",document.querySelectorAll(".game-card").length),console.log("🔘 Update buttons found:",document.querySelectorAll(".update-button").length),!(document.querySelector('[data-page="admin"]')!==null)){console.log("❌ Not on admin page, skipping initialization");return}console.log("✅ Admin page confirmed"),document.querySelectorAll(".game-card").forEach(e=>{const r=e.dataset.gameId;r&&S(r)})});
