import"./hoisted.DxfSxqbr.js";function k(s,e){if(!s.dataset.gameId)return;const o=s.querySelector(".update-history");if(o){if(!e||e.length===0){o.style.display="none";return}o.style.display="block",o.innerHTML=e.map(a=>`
      <div class="update-item">
        <div class="update-meta">
          <span class="update-user">${(a.user_email||"").split("@")[0]}</span>
          <span class="update-time">${new Date(a.created_at).toLocaleString()}</span>
        </div>
        <div class="update-text">${a.update_text}</div>
      </div>
    `).join("")}}async function y(s){try{const e=await fetch(`/api/games/${s}/updates`);if(!e.ok)throw new Error("Failed to load updates");const o=(await e.json()).results||[],a=document.querySelector(`.game-card[data-game-id="${s}"]`);a&&k(a,o)}catch(e){console.error("Error loading update history:",e)}}document.addEventListener("click",async s=>{console.log("🖱️ Click event detected on:",s.target);const e=s.target;if(!e.classList.contains("update-button")){console.log("❌ Not an update button, ignoring click");return}console.log("✅ Update button click confirmed");const n=e.closest(".game-card"),o=n.dataset.gameId,a=n.querySelectorAll(".team-score-input"),p=n.querySelector(".update-text-input"),g=p?.value.trim()||"",i=a[0].value,d=a[1].value,f=e.textContent;e.textContent="Updating...",e.setAttribute("disabled","true");const m=t=>{console.error("Authentication error:",t),document.cookie="auth=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;",localStorage.removeItem("authToken"),window.location.href=`/login?returnTo=${encodeURIComponent(window.location.pathname)}`},S=()=>{const t=document.cookie.split("; ");console.log("🍪 All cookies:",t);const r=t.find(l=>l.startsWith("auth="));if(console.log("🔍 Auth cookie found:",r?"Yes":"No"),r){const l=r.split("=")[1];return console.log("🔑 Token from cookies (first 20 chars):",l.substring(0,20)+"..."),decodeURIComponent(l)}const c=localStorage.getItem("authToken");return console.log("🔍 localStorage token found:",c?"Yes":"No"),c?(console.log("🔑 Token from localStorage (first 20 chars):",c.substring(0,20)+"..."),c):null};console.log("🚀 Step 1 - Update Score button clicked for game:",o),console.log("📊 Step 3 - Score values extracted - EHS:",i,"OPP:",d),console.log("📝 Step 3 - Update text:",g||"(none)");const u=S();if(!u){console.error("❌ Step 3 - Authentication failed: No token found"),m("No authentication token found");return}console.log("✅ Step 3 - Authentication token validated successfully");try{console.log("🔍 PATCH Request details:",{url:`/api/games/${o}`,token:u?`${u.substring(0,10)}...`:"none",ehsScore:parseInt(i,10),oppScore:parseInt(d,10),updateText:g});const t=await fetch(`/api/games/${o}`,{method:"PATCH",credentials:"include",headers:{"Content-Type":"application/json",Authorization:`Bearer ${u.trim()}`},body:JSON.stringify({ehsScore:parseInt(i,10),oppScore:parseInt(d,10),updateText:g})});console.log("🔄 PATCH Response status:",t.status);let r;try{r=await t.json()}catch(l){console.error("❌ JSON Parse Error:",l);const C=t.clone();try{const h=await C.text();console.error("❌ Raw response:",h)}catch(h){console.error("❌ Could not read response text:",h)}throw new Error("Invalid JSON response from server")}if(!t.ok){if(console.error("❌ PATCH Request Failed - Status:",t.status),console.error("❌ PATCH Response:",r),t.status===401){console.error("❌ 401 Unauthorized - Token may be invalid or expired"),e.textContent="Auth Error - Check Console",e.style.backgroundColor="#d9534f",setTimeout(()=>{m("Session expired")},5e3);return}throw new Error(r.error||"Failed to update score")}p&&(p.value="");const c=n.querySelectorAll(".team-score-input");c[0]&&c[1]&&(c[0].value=String(i),c[1].value=String(d)),r.updates&&r.updates.length>0?k(n,r.updates):await y(o),e.textContent="Updated!",setTimeout(()=>{e.textContent=f,e.removeAttribute("disabled")},2e3)}catch(t){if(console.error("Update Error:",t),t instanceof Error&&t.message.includes("token")){m("Invalid session");return}e.textContent="Error!",e.style.backgroundColor="#d9534f",setTimeout(()=>{e.textContent=f,e.removeAttribute("disabled"),e.style.backgroundColor=""},3e3)}});document.addEventListener("DOMContentLoaded",()=>{if(console.log("🚀 AdminScoreboardDisplay script loaded"),console.log("📄 Current page body dataset:",document.body.dataset),console.log("🎯 Game cards found:",document.querySelectorAll(".game-card").length),console.log("🔘 Update buttons found:",document.querySelectorAll(".update-button").length),!(document.querySelector('[data-page="admin"]')!==null)){console.log("❌ Not on admin page, skipping initialization");return}console.log("✅ Admin page confirmed"),document.querySelectorAll(".game-card").forEach(e=>{const n=e.dataset.gameId;n&&y(n)})});
