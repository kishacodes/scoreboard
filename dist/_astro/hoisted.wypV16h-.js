import"./hoisted.Dm2zTYwB.js";function C(a,e){if(!a.dataset.gameId)return;const n=a.querySelector(".update-history");if(n){if(!e||e.length===0){n.style.display="none";return}n.style.display="block",n.innerHTML=e.map(c=>`
      <div class="update-item">
        <div class="update-meta">
          <span class="update-user">${(c.user_email||"").split("@")[0]}</span>
          <span class="update-time">${new Date(c.created_at).toLocaleString()}</span>
        </div>
        <div class="update-text">${c.update_text}</div>
      </div>
    `).join("")}}async function b(a){try{const e=await fetch(`/api/games/${a}/updates`);if(!e.ok)throw new Error("Failed to load updates");const n=(await e.json()).results||[],c=document.querySelector(`.game-card[data-game-id="${a}"]`);c&&C(c,n)}catch(e){console.error("Error loading update history:",e)}}document.addEventListener("click",async a=>{console.log("🖱️ Click event detected on:",a.target);const e=a.target;if(!e.classList.contains("update-button")){console.log("❌ Not an update button, ignoring click");return}console.log("✅ Update button click confirmed");const t=e.closest(".game-card"),n=t.dataset.gameId,c=t.querySelectorAll(".team-score-input"),p=t.querySelector(".update-text-input"),f=t.querySelector(".quarter-select"),v=f instanceof HTMLSelectElement?f:null,S=t.querySelector(".time-input"),A=S instanceof HTMLInputElement?S:null,I=t.querySelector(".game-over-checkbox"),g=p?.value.trim()||"",T=v?.value||"",x=A?.value.trim()||"",k=I?.checked||!1,i=c[0].value,u=c[1].value,y=e.textContent;e.textContent="Updating...",e.setAttribute("disabled","true");const m=o=>{console.error("Authentication error:",o),document.cookie="auth=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;",localStorage.removeItem("authToken"),window.location.href=`/login?returnTo=${encodeURIComponent(window.location.pathname)}`},q=()=>{const o=document.cookie.split("; ");console.log("🍪 All cookies:",o);const s=o.find(l=>l.startsWith("auth="));if(console.log("🔍 Auth cookie found:",s?"Yes":"No"),s){const l=s.split("=")[1];return console.log("🔑 Token from cookies (first 20 chars):",l.substring(0,20)+"..."),decodeURIComponent(l)}const r=localStorage.getItem("authToken");return console.log("🔍 localStorage token found:",r?"Yes":"No"),r?(console.log("🔑 Token from localStorage (first 20 chars):",r.substring(0,20)+"..."),r):null};console.log("🚀 Step 1 - Update Score button clicked for game:",n),console.log("📊 Step 3 - Score values extracted - EHS:",ehsFinal,"OPP:",oppFinal),console.log("📝 Step 3 - Update text:",g||"(none)");const d=q();if(!d){console.error("❌ Step 3 - Authentication failed: No token found"),m("No authentication token found");return}console.log("✅ Step 3 - Authentication token validated successfully");try{console.log("🔍 PATCH Request details:",{url:`/api/games/${n}`,token:d?`${d.substring(0,10)}...`:"none",ehsScore:parseInt(i,10),oppScore:parseInt(u,10),updateText:g,isFinal:k});const o={ehsScore:parseInt(i,10),oppScore:parseInt(u,10),updateText:g,qtr:T,timeInqtr:x};k&&(o.final=1,o.ehsFinal=parseInt(i,10),o.oppFinal=parseInt(u,10));const s=await fetch(`/api/games/${n}`,{method:"PATCH",credentials:"include",headers:{"Content-Type":"application/json",Authorization:`Bearer ${d.trim()}`},body:JSON.stringify(o)});console.log("🔄 PATCH Response status:",s.status);let r;try{r=await s.json()}catch(E){console.error("❌ JSON Parse Error:",E);const w=s.clone();try{const h=await w.text();console.error("❌ Raw response:",h)}catch(h){console.error("❌ Could not read response text:",h)}throw new Error("Invalid JSON response from server")}if(!s.ok){if(console.error("❌ PATCH Request Failed - Status:",s.status),console.error("❌ PATCH Response:",r),s.status===401){console.error("❌ 401 Unauthorized - Token may be invalid or expired"),e.textContent="Auth Error - Check Console",e.style.backgroundColor="#d9534f",setTimeout(()=>{m("Session expired")},5e3);return}throw new Error(r.error||"Failed to update score")}p&&(p.value="");const l=t.querySelectorAll(".team-score-input");l[0]&&l[1]&&(l[0].value=String(i),l[1].value=String(u)),r.updates&&r.updates.length>0?C(t,r.updates):await b(n),e.textContent="Updated!",setTimeout(()=>{e.textContent=y,e.removeAttribute("disabled")},2e3)}catch(o){if(console.error("Update Error:",o),o instanceof Error&&o.message.includes("token")){m("Invalid session");return}e.textContent="Error!",e.style.backgroundColor="#d9534f",setTimeout(()=>{e.textContent=y,e.removeAttribute("disabled"),e.style.backgroundColor=""},3e3)}});document.addEventListener("DOMContentLoaded",()=>{if(console.log("🚀 AdminScoreboardDisplay script loaded"),console.log("📄 Current page body dataset:",document.body.dataset),console.log("🎯 Game cards found:",document.querySelectorAll(".game-card").length),console.log("🔘 Update buttons found:",document.querySelectorAll(".update-button").length),!(document.querySelector('[data-page="admin"]')!==null)){console.log("❌ Not on admin page, skipping initialization");return}console.log("✅ Admin page confirmed"),document.querySelectorAll(".game-card").forEach(e=>{const t=e.dataset.gameId;t&&b(t)})});
